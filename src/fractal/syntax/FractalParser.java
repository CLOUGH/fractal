
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 22 02:03:46 EST 2013
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.FractalValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 22 02:03:46 EST 2013
  */
public class FractalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\026\004\000\002" +
    "\026\011\000\002\021\003\000\002\022\003\000\002\023" +
    "\004\000\002\024\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\036\006\000\002\027\006\000\002\032\006\000\002\035" +
    "\006\000\002\030\006\000\002\031\006\000\002\033\006" +
    "\000\002\034\006\000\002\007\005\000\002\013\003\000" +
    "\002\013\003\000\002\012\005\000\002\011\004\000\002" +
    "\011\003\000\002\005\003\000\002\005\003\000\002\040" +
    "\003\000\002\025\006\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\005\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\036\005\020\006\030\007\025\010\006\011" +
    "\013\012\031\015\022\016\043\017\017\020\004\021\023" +
    "\022\010\023\011\024\024\001\002\000\004\025\145\001" +
    "\002\000\044\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\001\002" +
    "\000\044\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\001\002\000" +
    "\044\002\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002\000\004" +
    "\025\142\001\002\000\004\025\137\001\002\000\044\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002\000\044\002\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\001\002\000\004\002\136\001" +
    "\002\000\044\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\001\002" +
    "\000\044\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\001\002\000" +
    "\004\025\133\001\002\000\006\031\124\043\076\001\002" +
    "\000\044\002\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\001\002\000" +
    "\004\025\121\001\002\000\004\025\116\001\002\000\004" +
    "\025\113\001\002\000\010\025\051\042\045\044\046\001" +
    "\002\000\044\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002" +
    "\000\044\002\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\001\002\000" +
    "\010\025\051\042\045\044\046\001\002\000\004\043\071" +
    "\001\002\000\044\002\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\001" +
    "\002\000\044\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\001\002" +
    "\000\044\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\001\002\000" +
    "\044\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002\000\044" +
    "\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\001\002\000\044\002" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\044\002\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\001\002\000\040\002\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\001\002\000\040\002\001\005\020\006\030\007\025" +
    "\010\006\011\013\012\031\015\022\016\043\017\017\020" +
    "\004\021\023\022\010\023\011\024\024\001\002\000\004" +
    "\025\044\001\002\000\010\025\051\042\045\044\046\001" +
    "\002\000\064\002\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\064\002\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\026\uffce\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\001\002\000\064\002\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\001\002\000\064\002\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\033" +
    "\uffd4\034\060\035\061\036\057\001\002\000\010\025\051" +
    "\042\045\044\046\001\002\000\010\026\053\032\054\033" +
    "\055\001\002\000\044\002\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\001\002\000\010\025\051\042\045\044\046\001\002\000" +
    "\010\025\051\042\045\044\046\001\002\000\064\002\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\032" +
    "\uffd5\033\uffd5\034\060\035\061\036\057\001\002\000\010" +
    "\025\051\042\045\044\046\001\002\000\010\025\051\042" +
    "\045\044\046\001\002\000\010\025\051\042\045\044\046" +
    "\001\002\000\064\002\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\001\002\000\064\002\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\001\002\000\064\002\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\001\002\000\064\002\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6" +
    "\033\uffd6\034\060\035\061\036\057\001\002\000\010\026" +
    "\067\032\054\033\055\001\002\000\064\002\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002\000\040\002\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\001\002\000\006\004\073\043\076\001\002\000" +
    "\044\002\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\001\002\000\040" +
    "\005\020\006\030\007\025\010\006\011\013\012\031\013" +
    "\102\015\022\016\043\017\017\020\004\021\023\022\010" +
    "\023\011\024\024\001\002\000\044\002\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\001\002\000\044\002\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\001\002\000\044\002\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\001\002\000\042\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\001\002" +
    "\000\042\005\020\006\030\007\025\010\006\011\013\012" +
    "\031\013\102\014\uffdb\015\022\016\043\017\017\020\004" +
    "\021\023\022\010\023\011\024\024\001\002\000\004\014" +
    "\107\001\002\000\004\025\104\001\002\000\042\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\001\002\000\010\025\051\042\045\044" +
    "\046\001\002\000\010\026\106\032\054\033\055\001\002" +
    "\000\042\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\001\002\000\044\002" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\001\002\000\004\014\uffdc" +
    "\001\002\000\050\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\032" +
    "\054\033\055\001\002\000\050\002\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\032\054\033\055\001\002\000\010\025\051\042" +
    "\045\044\046\001\002\000\010\026\115\032\054\033\055" +
    "\001\002\000\044\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\001" +
    "\002\000\004\026\uffcc\001\002\000\004\026\120\001\002" +
    "\000\044\002\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\001\002\000" +
    "\010\025\051\042\045\044\046\001\002\000\010\026\123" +
    "\032\054\033\055\001\002\000\044\002\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\001\002\000\010\025\051\042\045\044\046" +
    "\001\002\000\044\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\001" +
    "\002\000\010\027\127\032\054\033\055\001\002\000\010" +
    "\025\051\042\045\044\046\001\002\000\010\030\131\032" +
    "\054\033\055\001\002\000\004\043\076\001\002\000\044" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\001\002\000\010\025" +
    "\051\042\045\044\046\001\002\000\010\026\135\032\054" +
    "\033\055\001\002\000\044\002\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\001\002\000\004\002\000\001\002\000\004\026\uffcc" +
    "\001\002\000\004\026\141\001\002\000\044\002\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\001\002\000\004\026\uffcc\001\002" +
    "\000\004\026\144\001\002\000\044\002\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\001\002\000\004\026\uffcc\001\002\000\004" +
    "\026\147\001\002\000\044\002\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\046\002\013\003\041\004\040\006\036\007" +
    "\011\021\032\022\033\023\014\024\015\026\025\027\020" +
    "\030\035\031\031\032\006\033\004\034\034\035\026\036" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\111\016" +
    "\047\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\110\016\047\017\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\067\006\036" +
    "\007\011\021\032\022\033\023\014\024\015\026\025\027" +
    "\020\030\035\031\031\032\006\033\004\034\034\035\026" +
    "\036\037\001\001\000\002\001\001\000\010\015\051\016" +
    "\047\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\065\016" +
    "\047\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\064\017\046\001\001\000\006\016\055\017" +
    "\046\001\001\000\002\001\001\000\004\017\063\001\001" +
    "\000\004\017\062\001\001\000\004\017\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\073\013\071\040\074\001\001\000\002" +
    "\001\001\000\050\004\102\005\077\006\036\007\011\011" +
    "\100\021\032\022\033\023\014\024\015\025\076\026\025" +
    "\027\020\030\035\031\031\032\006\033\004\034\034\035" +
    "\026\036\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\102\005" +
    "\077\006\036\007\011\011\107\021\032\022\033\023\014" +
    "\024\015\025\076\026\025\027\020\030\035\031\031\032" +
    "\006\033\004\034\034\035\026\036\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\104\016\047\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\113\016\047\017\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\121\016\047\017\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\125\016\047\017\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\127\016" +
    "\047\017\046\001\001\000\002\001\001\000\004\040\131" +
    "\001\001\000\002\001\001\000\010\015\133\016\047\017" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\145\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  	
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		
		try {
		    return this.lexer.next_token();
		} catch (java.io.IOException ioe) 
		{
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		FractalLexer lexer;
		public FractalParser(FractalLexer lexer){
			super(lexer);
			this.lexer = lexer;		
		}
		public void report_error(String message, Object info){
			System.err.println(message);
		}
		public void syntax_error(Symbol current_token) {
			System.err.println("There was an error on Line("+
				this.lexer.getLine() +
				") \n Syntax error at \"" + 
				this.lexer.getChar() + "\" ");

			report_error("Syntax error", current_token);
			
			System.err.println ("\nLast token read is " + this.lexer.getText());

		}
		
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // empty ::= 
            {
              Object RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("empty",14, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= LPAREN exp RPAREN 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = e; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= DOUBLE 
            {
              ASTExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(d)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= INTEGER 
            {
              ASTExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(i)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= factor 
            {
              ASTExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term MOD factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMod(t,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpDiv(t,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMul(t,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= term 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MINUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpSub(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp PLUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT= new ASTExpAdd(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("exp",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // selfStmt ::= SELF LPAREN exp RPAREN 
            {
              ASTSelf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTSelf(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("selfStmt",19, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fractalVar ::= VARIABLE 
            {
              ASTFracVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTFracVar(v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalVar",30, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fracBodyStmt ::= selfStmt 
            {
              ASTStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSelf s = (ASTSelf)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBodyStmt",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fracBodyStmt ::= stmt 
            {
              ASTStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBodyStmt",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fractalBody ::= fracBodyStmt 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement fs = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 ArrayList<ASTStatement> body=new ArrayList<ASTStatement>();
							body.add(fs);RESULT = body;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalBody",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fractalBody ::= fracBodyStmt fractalBody 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStatement fs = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 b.add(fs);RESULT = b; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalBody",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fractalStmt ::= FRACTAL fractalBody END 
            {
              ASTFractal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTFractal(b); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalStmt",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fractalExp ::= fractalVar 
            {
              ASTFracExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar v = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalExp",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fractalExp ::= fractalStmt 
            {
              ASTFracExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal f = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT= f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractalExp",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // definition ::= DEF VARIABLE fractalExp 
            {
              ASTDefine RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT= new ASTDefine(var,f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("definition",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // penupStmt ::= PENUP LPAREN empty RPAREN 
            {
              ASTTCmdPenUp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdPenUp(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("penupStmt",26, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pendownStmt ::= PENDOWN LPAREN empty RPAREN 
            {
              ASTTCmdPenDown RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdPenDown(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("pendownStmt",25, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // homeStmt ::= HOME LPAREN empty RPAREN 
            {
              ASTTCmdHome RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdHome(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("homeStmt",23, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // clearStmt ::= CLEAR LPAREN empty RPAREN 
            {
              ASTTCmdClear RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdClear(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("clearStmt",22, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rightStmt ::= RIGHT LPAREN exp RPAREN 
            {
              ASTTCmdRight RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdRight(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("rightStmt",27, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // leftStmt ::= LEFT LPAREN exp RPAREN 
            {
              ASTTCmdLeft RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdLeft(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("leftStmt",24, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // backStmt ::= BACK LPAREN exp RPAREN 
            {
              ASTTCmdBack RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdBack(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("backStmt",21, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // forwardStmt ::= FORWARD LPAREN exp RPAREN 
            {
              ASTTCmdForward RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT= new ASTTCmdForward(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("forwardStmt",28, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // turtleStmt ::= rightStmt 
            {
              ASTTurtleCmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdRight r = (ASTTCmdRight)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = r; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // turtleStmt ::= leftStmt 
            {
              ASTTurtleCmd RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdLeft l = (ASTTCmdLeft)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // turtleStmt ::= penupStmt 
            {
              ASTTurtleCmd RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdPenUp pu = (ASTTCmdPenUp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = pu; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // turtleStmt ::= pendownStmt 
            {
              ASTTurtleCmd RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdPenDown pd = (ASTTCmdPenDown)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // turtleStmt ::= homeStmt 
            {
              ASTTurtleCmd RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdHome h = (ASTTCmdHome)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = h; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // turtleStmt ::= clearStmt 
            {
              ASTTurtleCmd RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdClear c = (ASTTCmdClear)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // turtleStmt ::= backStmt 
            {
              ASTTurtleCmd RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdBack b = (ASTTCmdBack)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = b; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // turtleStmt ::= forwardStmt 
            {
              ASTTurtleCmd RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdForward f = (ASTTCmdForward)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleStmt",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // setScaleStmt ::= SCALE exp 
            {
              ASTSetScale RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTSetScale(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("setScaleStmt",18, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // levelStmt ::= LEVEL exp 
            {
              ASTSetLevel RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTSetLevel(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("levelStmt",17, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // restoreStmt ::= RESTORE 
            {
              ASTRestoreStmt RESULT =null;
		 RESULT = new ASTRestoreStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("restoreStmt",16, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saveStmt ::= SAVE 
            {
              ASTSaveStmt RESULT =null;
		 RESULT = new ASTSaveStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("saveStmt",15, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // renderStmt ::= RENDER LBRACE exp COMMA exp RBRACE fractalVar 
            {
              ASTRender RESULT =null;
		int levelleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).right;
		ASTExp level = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).value;
		int scaleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int scaleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp scale = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fractalleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fractalright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar fractal = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(level,scale,fractal); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderStmt",20, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-6)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // renderStmt ::= RENDER fractalVar 
            {
              ASTRender RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar var = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(var); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderStmt",20, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= renderStmt 
            {
              ASTStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTRender r = (ASTRender)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = r; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= setScaleStmt 
            {
              ASTStatement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSetScale ss = (ASTSetScale)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = ss; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= levelStmt 
            {
              ASTStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSetLevel l = (ASTSetLevel)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= restoreStmt 
            {
              ASTStatement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTRestoreStmt r = (ASTRestoreStmt)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = r; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= saveStmt 
            {
              ASTStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSaveStmt s = (ASTSaveStmt)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition 
            {
              ASTStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDefine d = (ASTDefine)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= turtleStmt 
            {
              ASTStatement RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTurtleCmd ts = (ASTTurtleCmd)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = ts; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		RESULT = new ASTStmtSequence(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence lst = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence sl = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(sl); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

